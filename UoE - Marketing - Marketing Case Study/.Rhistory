token_importance$Importance,
colors = pal)
library(ggwordcloud)
token_importance <- read_csv(file.choose())
library(ggwordcloud)
install.packages("ggwordcloud")
token_importance <- read_csv(file.choose())
library(ggwordcloud)
ggplot(token_importance, aes(label = Variable, size = Importance,
color = Importance)) +
geom_text_wordcloud() +
# scale_color_fermenter(palette = "PuBuGn") +
scale_color_viridis_c() +
scale_size_area(max_size = 8) +
facet_wrap(~ Sign) +
theme_void()
library(ggwordcloud)
ggplot(token_importance, aes(label = Variable, size = Importance,
color = Importance)) +
geom_text_wordcloud() +
# scale_color_fermenter(palette = "PuBuGn") +
scale_color_viridis_c() +
scale_size_area(max_size = 8) +
facet_wrap(~ Sign) +
theme_void()
token_importance <- read_csv(file.choose())
install.packages("ggwordcloud")
token_importance <- read_csv(file.choose())
#install.packages("ggwordcloud")
token_importance <- read_csv(file.choose())
#install.packages("ggwordcloud")
library(ggwordcloud)
ggplot(token_importance, aes(label = Variable, size = Importance,
color = Importance)) +
geom_text_wordcloud() +
# scale_color_fermenter(palette = "PuBuGn") +
scale_color_viridis_c() +
scale_size_area(max_size = 8) +
facet_wrap(~ Sign) +
theme_void()
user_reviews <- readr::read_tsv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv")
review_dtm <- user_reviews %>%
unnest_tokens(word, text) %>%
count(user_name, word) %>%
cast_dtm(user_name, word, n)
library(tm)
install.packages("tm")
#install.packages("tm")
library(tm)
#install.packages("tm")
library(tm)
user_reviews <- readr::read_tsv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv")
review_dtm <- user_reviews %>%
unnest_tokens(word, text) %>%
count(user_name, word) %>%
cast_dtm(user_name, word, n)
library(wordcloud)
pal <- brewer.pal(8,"Dark2")
wordcloud(token_importance$Variable,
token_importance$Importance,
colors = pal)
#install.packages("tm")
library(tm)
user_reviews <- readr::read_tsv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv")
review_dtm <- user_reviews %>%
unnest_tokens(word, text) %>%
count(user_name, word) %>%
cast_dtm(user_name, word, n)
#install.packages("tm")
library(tm)
user_reviews <- readr::read_tsv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv")
review_dtm <- user_reviews %>%
unnest_tokens(word, text) %>%
count(user_name, word) %>%
cast_dtm(user_name, word, n)
as.matrix(review_dtm)[1:10, 1:10]
review_lda <- LDA(review_dtm, k = 4, control = list(seed = 42))
?LDA
?LDA()
library("topicmodels")
library(topicmodels)
install.package("topicmodels")
install.packages("topicmodels")
#install.packages("topicmodels")
library(topicmodels)
#install.packages("tm")
library(tm)
#install.packages("topicmodels")
library(topicmodels)
user_reviews <- readr::read_tsv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv")
review_dtm <- user_reviews %>%
unnest_tokens(word, text) %>%
count(user_name, word) %>%
cast_dtm(user_name, word, n)
as.matrix(review_dtm)[1:10, 1:10]
review_lda <- LDA(review_dtm, k = 4, control = list(seed = 42))
terms(review_lda, 10)
#install.packages("tm")
library(tm)
#install.packages("topicmodels")
library(topicmodels)
user_reviews <- readr::read_tsv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv")
review_dtm <- user_reviews %>%
unnest_tokens(word, text) %>%
count(user_name, word) %>%
cast_dtm(user_name, word, n)
as.matrix(review_dtm)[1:10, 1:10]
review_lda <- LDA(review_dtm, k = 4, control = list(seed = 42))
terms(review_lda, 10)
library(tsne)
install.packages("tsne")
#install.packages("tsne")
library(tsne)
svd_tsne <- function(x) tsne(svd(x)$u)
lda_json <- createJSON(phi = posterior(review_lda)$terms,
theta = posterior(review_lda)$topics,
vocab = posterior(review_lda)$terms %>% colnames,
doc.length = rowSums(as.matrix(review_dtm)),
term.frequency = colSums(as.matrix(review_dtm)),
mds.method = svd_tsne)
#install.packages("tsne")
install.packages("LDAvis")
library(ggtext)
library(tsne)
svd_tsne <- function(x) tsne(svd(x)$u)
lda_json <- createJSON(phi = posterior(review_lda)$terms,
theta = posterior(review_lda)$topics,
vocab = posterior(review_lda)$terms %>% colnames,
doc.length = rowSums(as.matrix(review_dtm)),
term.frequency = colSums(as.matrix(review_dtm)),
mds.method = svd_tsne)
df_com <- read_csv('./complete.csv')
df_scr <- read_csv('./scrubbed.csv')
df <- df_scr[,c("comments","datetime","latitude","longitude","duration (seconds)")]
df_2 <- df_com[,c("comments","datetime","latitude","longitude","duration (seconds)")]
df$time <- mdy_hm(df$datetime)
df_2$time <- mdy_hm(df_2$datetime)
df_f <- df_2 %>%
drop_na("duration (seconds)") %>%
drop_na("time") %>%
transform(`duration (seconds)` = as.numeric(`duration (seconds)`))
with(df_f, plot(x = time, y = duration..seconds., type = "h"))
library(tidyverse)
# Geo Library
library(leaflet)
library(rgdal)
library(leaflet.providers)
library(htmltools)
# Time Series
library(lubridate)
df_com <- read_csv('./complete.csv')
df_scr <- read_csv('./scrubbed.csv')
df <- df_scr[,c("comments","datetime","latitude","longitude","duration (seconds)")]
df_2 <- df_com[,c("comments","datetime","latitude","longitude","duration (seconds)")]
df$time <- mdy_hm(df$datetime)
df_2$time <- mdy_hm(df_2$datetime)
df_f <- df_2 %>%
drop_na("duration (seconds)") %>%
drop_na("time") %>%
transform(`duration (seconds)` = as.numeric(`duration (seconds)`))
with(df_f, plot(x = time, y = duration..seconds., type = "h"))
setwd("~/Dropbox/Projects/UFO sighting")
library(tidyverse)
# Geo Library
library(leaflet)
library(rgdal)
library(leaflet.providers)
library(htmltools)
# Time Series
library(lubridate)
df_com <- read_csv('./complete.csv')
df_scr <- read_csv('./scrubbed.csv')
df <- df_scr[,c("comments","datetime","latitude","longitude","duration (seconds)")]
df_2 <- df_com[,c("comments","datetime","latitude","longitude","duration (seconds)")]
df$time <- mdy_hm(df$datetime)
df_2$time <- mdy_hm(df_2$datetime)
df_f <- df_2 %>%
drop_na("duration (seconds)") %>%
drop_na("time") %>%
transform(`duration (seconds)` = as.numeric(`duration (seconds)`))
with(df_f, plot(x = time, y = duration..seconds., type = "h"))
library("psych")
library ("GPArotation")
library("tidyverse")
SmartWatch_Data_File <- read_excel("~/Dropbox/Projects/Marketing Case Study/SmartWatch Data File.xlsx")
df <- SmartWatch_Data_File[, (1:7)]
R <- cor(df)
library(MASS)
X <- cor(df)
iX <- ginv(X)
S2 <- diag(diag((iX^-1)))
AIS <- S2%*%iX%*%S2                      # anti-image covariance matrix
IS <- X+AIS-2*S2                         # image covariance matrix
Dai <- sqrt(diag(diag(AIS)))             # The diagonals of the anti-image correlation matrix diagonals should be &gt; 0.5
IR <- ginv(Dai)%*%IS%*%ginv(Dai)         # image correlation matrix
AIR <- ginv(Dai)%*%AIS%*%ginv(Dai)       # anti-image correlation matrix
print(diag(AIR), row.names = FALSE)
VSS.scree(R, main = "scree plot")
R <- cor(df)
fa(R, nfactors = 2, fm="pa", rotate="Promax") %>% print(sort = TRUE)
setwd("~/Dropbox/Projects/Marketing Case Study")
library("psych")
library ("GPArotation")
library("tidyverse")
SmartWatch_Data_File <- read_excel("~/Dropbox/Projects/Marketing Case Study/SmartWatch Data File.xlsx")
df <- SmartWatch_Data_File[, (1:7)]
R <- cor(df)
library(tidyverse)
factor_scores <- read_csv("factor_scores.csv")
SmartWatch_Data_File <- read_excel("SmartWatch Data File.xlsx")
library(readxl)
library(tidyverse)
library(readxl)
factor_scores <- read_csv("factor_scores.csv")
SmartWatch_Data_File <- read_excel("SmartWatch Data File.xlsx")
df<- factor_scores[,c(4,5)] %>%
cbind(SmartWatch_Data_File[,(8:12)])
with(df,
F1 %>%
density() %>%
plot(col = "grey", ylim = c(0,0.5))
)
with(df,
F2 %>%
density() %>%
lines(col = "skyblue")
)
legend(0.3, 0.48, legend=c("F1", "F2"),
col=c("grey", "skyblue"), lty = 1:1, cex=0.8)
library(psych)
df <- SmartWatch_Data_File %>%
cbind(factor_scores[,c(4,5)])
df <- df%>%
mutate(AmznP = factor(AmznP)) %>%
mutate(Female = factor(Female)) %>%
mutate(Degree = factor(Degree)) %>%
mutate(Income = factor(Income))
replications(data = df, F1 ~ AmznP*Female*Degree*Income)
library(nlme)
library(car)
lm(data = df, F1 ~ AmznP*Female*Degree) %>%
Anova(type = 3) %>%
print()
lm(data = df, F2 ~ AmznP*Female*Degree) %>%
Anova(type = "III")
lm(data = df, F1 ~ Income) %>%
Anova(Type = 3)
aov(data = df, F1 ~ AmznP + Female + Degree + Income) %>%
summary.lm()
aov(data = df, F1 ~ Female + Degree + Income + AmznP) %>%
summary.lm()
aov1 <- aov(data = df, F1 ~ AmznP + Female + Degree + Income)
aov2 <- aov(data = df, F2 ~ AmznP + Female + Degree + Income)
summary(aov1)
summary(aov2)
aov(data = df, F1 ~ Income) %>%
summary.lm()
library(ggplot2)
require(gridExtra)
g1.1 <- df %>%
ggplot(aes(x = AmznP, y = F1)) +
geom_boxplot() +
ylab("F1 - Personal Trainner") +
theme_light()
g1.2 <- df %>%
ggplot(aes(x = Female, y = F1)) +
geom_boxplot() +
ylab(NULL) +
theme_light()
g1.3 <- df %>%
ggplot(aes(x = Degree, y = F1)) +
geom_boxplot() +
ylab(NULL) +
theme_light()
g1.4 <- df %>%
ggplot(aes(x = Income, y = F1)) +
geom_boxplot() +
ylab(NULL) +
theme_light()
g2.1 <- df %>%
ggplot(aes(x = AmznP, y = F2)) +
geom_boxplot() +
ylab("F2 - Personal Secretory") +
theme_light()
g2.2 <- df %>%
ggplot(aes(x = Female, y = F2)) +
geom_boxplot() +
ylab(NULL) +
theme_light()
g2.3 <- df %>%
ggplot(aes(x = Degree, y = F2)) +
geom_boxplot() +
ylab(NULL) +
theme_light()
g2.4 <- df %>%
ggplot(aes(x = Income, y = F2)) +
geom_boxplot() +
ylab(NULL) +
theme_light()
grid.arrange(grobs = list(g1.1, g1.2, g1.3, g1.4,
g2.1, g2.2, g2.3, g2.4), nrow = 2)
g1.1 <- df %>%
ggplot(aes(x = AmznP, y = F1)) +
geom_violin() +
ylab("F1 - Sport Band")
g1.2 <- df %>%
ggplot(aes(x = Female, y = F1)) +
geom_violin() +
ylab(NULL)
g1.3 <- df %>%
ggplot(aes(x = Degree, y = F1)) +
geom_violin() +
ylab(NULL)
g1.4 <- df %>%
ggplot(aes(x = Income, y = F1)) +
geom_violin() +
ylab(NULL)
g2.1 <- df %>%
ggplot(aes(x = AmznP, y = F2)) +
geom_violin() +
ylab("F2 - Smart Watch")
g2.2 <- df %>%
ggplot(aes(x = Female, y = F2)) +
geom_violin() +
ylab(NULL)
g2.3 <- df %>%
ggplot(aes(x = Degree, y = F2)) +
geom_violin() +
ylab(NULL)
g2.4 <- df %>%
ggplot(aes(x = Income, y = F2)) +
geom_violin() +
ylab(NULL)
grid.arrange(grobs = list(g1.1, g1.2, g1.3, g1.4,
g2.1, g2.2, g2.3, g2.4), nrow = 2)
p1 <- df %>%
ggplot( aes(x = AmznP, y = F1)) +
geom_boxplot(trim=TRUE) +
facet_grid(cols = vars(Income))
p2 <- df %>%
ggplot( aes(x = AmznP, y = F2)) +
geom_boxplot(trim=TRUE) +
facet_grid(cols = vars(Income))
grid.arrange(p1,p2)
p1 <- df %>%
ggplot( aes(x = AmznP, y = F1)) +
geom_violin() +
facet_grid(cols = vars(Female))
p2 <- df %>%
ggplot( aes(x = AmznP, y = F2)) +
geom_violin() +
facet_grid(cols = vars(Female))
grid.arrange(p1,p2)
library(ggplot2)
require(gridExtra)
g1.1 <- ggplot(df, aes(x = Age, y = F1, colour = AmznP)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g2.1 <- ggplot(df, aes(x = Age, y = F2, colour = AmznP)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g1.2 <- ggplot(df, aes(x = Age, y = F1, colour = Female)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g2.2 <- ggplot(df, aes(x = Age, y = F2, colour = Female)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g1.3<- ggplot(df, aes(x = Age, y = F1, colour = Degree)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g2.3 <- ggplot(df, aes(x = Age, y = F2, colour = Degree)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
grid.arrange(grobs = list(g1.1, g1.2, g1.3,
g2.1, g2.2, g2.3), nrow = 2)
grid.arrange(grobs = list(g1.1, g1.2, g1.3,
g2.1, g2.2, g2.3), nrow = 2)
grid.arrange(grobs = list(g1.1, g1.2, g1.3,
g2.1, g2.2, g2.3), nrow = 2)
knitr::opts_chunk$set(echo = TRUE)
grid.arrange(grobs = list(g1.1, g1.2, g1.3,
g2.1, g2.2, g2.3), nrow = 2)
library(readr)
library(readxl)
factor_scores <- read_csv("factor_scores.csv")
SmartWatch_Data_File <- read_excel("SmartWatch Data File.xlsx")
df <- cbind(SmartWatch_Data_File, factor_scores)
df <- df%>%
mutate(AmznP = factor(AmznP)) %>%
mutate(Female = factor(Female)) %>%
mutate(Degree = factor(Degree)) %>%
mutate(Income = factor(Income))
lm(F1 ~ Age, data = df) %>%
summary()
lm(F2 ~ Age, data = df) %>%
summary()
library(ggplot2)
require(gridExtra)
g1.1 <- ggplot(df, aes(x = Age, y = F1, colour = AmznP)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g2.1 <- ggplot(df, aes(x = Age, y = F2, colour = AmznP)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g1.2 <- ggplot(df, aes(x = Age, y = F1, colour = Female)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g2.2 <- ggplot(df, aes(x = Age, y = F2, colour = Female)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g1.3<- ggplot(df, aes(x = Age, y = F1, colour = Degree)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
g2.3 <- ggplot(df, aes(x = Age, y = F2, colour = Degree)) +
geom_point() +
geom_jitter() +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y~x) +
scale_colour_brewer(palette= "Accent") +
ylim(0,5) +
theme_minimal()
grid.arrange(grobs = list(g1.1, g1.2, g1.3,
g2.1, g2.2, g2.3), nrow = 2)
grid.arrange(grobs = list(g1.1, g1.2, g1.3,
g2.1, g2.2, g2.3), nrow = 2)
grid.arrange(grobs = list(g1.1, g1.2, g1.3,
g2.1, g2.2, g2.3), nrow = 2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(corrplot)
factor_scores <- read_csv("factor_scores.csv")
SmartWatch_Data_File <- read_excel("SmartWatch Data File.xlsx")
df <- SmartWatch_Data_File %>%
cbind(factor_scores[,c(2,3)])
df <- df%>%
mutate(AmznP = factor(AmznP)) %>%
mutate(Female = factor(Female)) %>%
mutate(Degree = factor(Degree)) %>%
mutate(Income = factor(Income))
levels(df$AmznP)
library(nlme)
library(car)
r$`Female:AmznP` %>%
chisq.test()
fligner.test(data = df, PA2 ~ AmznP)
fligner.test(data = df, PA2 ~ Female)
fligner.test(data = df, PA2 ~ Degree)
fligner.test(data = df, PA2 ~ Income)
aov(data = df, PA1 ~ Female) %>%
summary.lm()
interaction.plot(df$Amzn, df$Female, df$PA1)
interaction.plot(df$Amzn, df$Degree, df$PA1)
interaction.plot(df$Female, df$Degree, df$PA1)
interaction.plot(df$Income, df$Amzn, df$PA1)
interaction.plot(df$Income, df$Degree, df$PA1)
interaction.plot(df$Income, df$Female, df$PA1)
